class G{constructor({target:k=k,mutation:y="words",overflow:q="hidden"}){if(this.target=k,this.mutation=y,this.original=k.cloneNode(),this.overflow=q,this.charArray=[],this.charParentArray=[],this.wordArray=[],this.wordParentArray=[],this.lineArray=[],this.lineParentArray=[],!this.target)return;if(this.mutation!=="chars"&&this.mutation!=="words"&&this.mutation!=="lines"){console.error("Split needs a mutation. Choose `chars`, `words` or `lines`");return}this.split()}split(){this.splitWords=this.target.innerHTML.split(" "),this.outerSpan=document.createElement("span"),this.outerSpan.setAttribute("data-split","outer"),this.outerSpan.style.display="inline-block",this.outerSpan.style.overflow="hidden",this.outerSpan.style.verticalAlign="top",this.innerSpan=document.createElement("span"),this.innerSpan.setAttribute("data-split","inner"),this.innerSpan.style.display="inherit",this.innerSpan.style.overflow=this.overflow,this.innerSpan.style.verticalAlign="inherit",this.whitespace=document.createTextNode(" "),this.target.removeChild(this.target.firstChild),this.init()}init(){if(this.splitWords.forEach((k)=>{const y=this.innerSpan.cloneNode();y.innerHTML=k;const q=this.outerSpan.cloneNode();q.appendChild(y),this.target.appendChild(q),this.target.append(" "),this.wordArray.push(y),this.wordParentArray.push(q)}),this.mutation==="chars"){const k=Array.prototype.slice.call(this.target.children);if(this.wordArray=[],this.wordParentArray=[],k.length>0)k.forEach((y)=>{const q=y.children[0],B=q.innerHTML.split("");y.removeChild(q),B.forEach((D)=>{const j=this.innerSpan.cloneNode();j.innerHTML=D,y.appendChild(j),this.charArray.push(j)}),this.charParentArray.push(y)})}if(this.mutation==="lines"){let k,y=null;if(!document.body.contains(this.target)){this.original.style.display="none",document.body.appendChild(this.original);const j=window.getComputedStyle(this.original,null);k=parseFloat(j.fontSize),this.original.style.display="inherit",document.body.removeChild(this.original)}else{const j=window.getComputedStyle(this.target,null);k=parseFloat(j.fontSize)}const q=k*0.2;let B=[],D=[];this.wordArray.forEach((j)=>{const{top:x}=this.getPosition(j,this.target);if(y===null||x-y>=q)y=x,B.push(D=[]);D.push(j)}),this.wordArray=[],this.wordParentArray=[],this.target.innerHTML="",B.forEach((j)=>{const x=this.outerSpan.cloneNode();this.target.appendChild(x),this.lineParentArray.push(x);let F="";if(j.forEach((A,H)=>{if(F+=A.innerHTML,H!==j.length-1)F+=" "}),F!==""){const A=this.innerSpan.cloneNode();A.innerHTML=F,x.appendChild(A),this.lineArray.push(A)}})}}getPosition(k,y){const q=y.getBoundingClientRect(),{width:B,height:D,x:j,y:x}=k.getBoundingClientRect(),F=j-q.x,A=x-q.y;return{width:B,height:D,top:A,left:F}}}export{G as default};
